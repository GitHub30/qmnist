--- lenet5.lsh.orig	2019-05-23 10:25:25.000000000 -0400
+++ lenet5.lsh	2019-03-19 15:50:29.000000000 -0400
@@ -53,33 +53,85 @@
 (libload "gblearn2/net-lenet5")
 (libload "gblearn2/gb-trainers")
 (libload "gblearn2/gb-meters")
-(libload "dsource-mnist")
+(libload "gblearn2/demos/dsource-mnist")
+
+
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;; load databases
 
-(when (not *mnist-dir*)
-      (setq *mnist-dir* (concat lushdir "/local/mnist")))
 
-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
-;; a function to load the MNIST database.
-(de build-databases-mnist (trsize tesize image-dir)
-  (setq trainingdb
-        (new dsource-idx3l-narrow
-             (new dsource-mnist
-                  (load-matrix (concat-fname image-dir "train-images-idx3-ubyte"))
-                  (load-matrix (concat-fname image-dir "train-labels-idx1-ubyte"))
-		  32 32 0 0.01)
-             trsize 0))
-  (setq testingdb
-        (new dsource-idx3l-narrow
-             (new dsource-mnist
-                  (load-matrix (concat-fname image-dir "t10k-images-idx3-ubyte"))
-                  (load-matrix (concat-fname image-dir "t10k-labels-idx1-ubyte"))
-		  32 32 0 0.01)
-             tesize (- 5000 (* 0.5 tesize)))) ())
+(let ((image-dir (concat-fname "_mnist/MNIST/raw")))
+  (printf "Reading mnist from directory %s\n" image-dir)
+  (defvar mnist-trainingdb
+    (new dsource-mnist
+         (load-matrix (concat-fname image-dir "train-images-idx3-ubyte"))
+         (load-matrix (concat-fname image-dir "train-labels-idx1-ubyte"))
+         32 32 0 0.01) )
+  (defvar mnist-testingdb
+    (new dsource-mnist
+         (load-matrix (concat-fname image-dir "t10k-images-idx3-ubyte"))
+         (load-matrix (concat-fname image-dir "t10k-labels-idx1-ubyte"))
+         32 32 0 0.01) ) )
+
+(de load-qmnist-labels(s)
+  (let* ((r (load-matrix s))
+         (a (ubyte-matrix (idx-dim r 0))))
+    (idx-copy (select r 1 0) a)
+    a ) )) )
+
+(let ((image-dir (concat-fname ".")))
+  (printf "Reading qmnist from directory %s\n" image-dir)
+  (defvar qmnist-trainingdb
+    (new dsource-mnist
+         (load-matrix (concat-fname image-dir "qmnist-train-images-idx3-ubyte"))
+         (load-qmnist-labels (concat-fname image-dir "qmnist-train-labels-idx2-int"))
+         32 32 0 0.01) )
+  (defvar qmnist-testingdb
+    (new dsource-mnist
+         (load-matrix (concat-fname image-dir "qmnist-test-images-idx3-ubyte"))
+         (load-qmnist-labels (concat-fname image-dir "qmnist-test-labels-idx2-int"))
+         32 32 0 0.01) )
+  (defvar qmnist-10ktestingdb
+    (new dsource-idx3l-narrow qmnist-testingdb 10000 0) )
+  (defvar qmnist-50ktestingdb
+    (new dsource-idx3l-narrow qmnist-testingdb 50000 10000) ) )
+  
+
+
+;;; ----------------------------
+;;; showimgs
+
+(de showimgs(imgs &optional (s 0) c)
+  (graphics-batch
+   (cls)
+   (let ((x 0)(y 2))
+     (while (and (< s (idx-dim imgs 0))
+                 (< (+ y 28) (ysize)) )
+       (when c
+         (while (and (< s (idx-dim imgs 0)) (not (c s)))
+           (incr s) ) )
+       (when (= x 0)
+         (gsave
+          (color color-fg)
+          (font "fixed")
+          (gprintf x (+ y 10) "%6d" (if lbls (lbls s 5) s)) )
+         (incr x 50) )
+       (when (< s (idx-dim imgs 0))
+         (let ((ubim (select imgs 0 s)))
+           (gsave (color-rgb 1 0 0)
+                  (draw-rect (1- x) (1- y) 29 29)) 
+           (gray-draw-matrix x y ubim 255 0) ) 
+         (incr x 30)
+         (when (> (+ x 28) (xsize))
+           (setq x 0)
+           (incr y 30) )
+         (incr s 1) ) ) ) ) )
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
+
 ;; number of classes
 (setq nclasses 10)
 ;; the target values for mean-squared error training
@@ -115,31 +167,22 @@
 (setq testmeter  (new classifier-meter))
 
 ;; initialize the network weights
+(seed 314)
 (==> :thenet:machine forget 1 2)
 
-;; build databases
-;; the first two arguments are the sizes of the training
-;; and testing sets. The 3rd arg is the directory where
-;; the MNIST file reside (change this for your local setup).
-
-(build-databases-mnist 2000 1000 *mnist-dir*) ;; SMALL DEMO
-;; (build-databases-mnist 60000 10000 *mnist-dir*) ;; FULL MNIST
-
-
-;; estimate second derivative on 100 iterations, using mu=0.02
-;; and set individual espilons
-(printf "computing diagonal hessian and learning rates\n")
-(==> thetrainer compute-diaghessian trainingdb 100 0.02)
-
-;; do training iterations 
-(printf "training with %d training samples and %d test samples\n" 
-	(==> trainingdb size)
-	(==> testingdb size))
-
 ;; this goes at about 25 examples per second on a PIIIM 800MHz
-(de doit (n)
+(de doit (n trainingdb testingdb &optional (lr 0.0001))
+  (printf "computing diagonal hessian and learning rates\n")
+  (let* ((hessiandb trainingdb)
+         (pos (==> hessiandb tell)))
+    (==> hessiandb seek 0)
+    (==> thetrainer compute-diaghessian hessiandb 1000 0.02)
+    (==> hessiandb seek pos) )
+  (printf "training with %d training samples and %d test samples\n" 
+          (==> trainingdb size)
+          (==> testingdb size))
   (repeat n
-    (==> thetrainer train trainingdb trainmeter 0.0001 0)
+    (==> thetrainer train trainingdb trainmeter lr 0)
     (printf "training: ") (flush)
     (==> thetrainer test trainingdb trainmeter)
     (==> trainmeter display)
@@ -148,5 +191,75 @@
     (==> testmeter display)  
     ()))
 
-(print (time (doit 5)))
+;; (print (time (doit 5)))
 
+(de final-perf()
+  (each (((name db) `(("mnist10k" ,mnist-testingdb)
+                      ("qmnist10k" ,qmnist-10ktestingdb)
+                      ("qmnist50k" ,qmnist-50ktestingdb) )))
+    (printf "***%10s: " name) (flush)
+    (==> testmeter clear)
+    (==> thetrainer test db testmeter)
+    (==> testmeter display) ) )
+    
+
+(de do-mnist()
+  (seed 314)
+  (==> :thenet:machine forget 1 2)
+  (each ((lr '(1e-4 1e-5 1e-6)))
+    (doit 10 mnist-trainingdb mnist-testingdb lr)
+    (printf "  qmnist: ") (flush)
+    (==> thetrainer test qmnist-testingdb testmeter)
+    (==> testmeter display) )
+  (final-perf) )
+
+(de do-qmnist()
+  (seed 314)
+  (==> :thenet:machine forget 1 2)
+  (each ((lr '(1e-4 1e-5 1e-6)))
+    (doit 10 qmnist-trainingdb qmnist-testingdb lr)
+    (printf "   mnist: ") (flush)
+    (==> thetrainer test mnist-testingdb testmeter)
+    (==> testmeter display) )
+  (final-perf) )
+
+
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+;; scratch code for matched test set
+
+
+(setq qmnist-10ktestingdb (new dsource-idx3l-narrow qmnist-testingdb 10000 0))
+(setq qmnist-50ktestingdb (new dsource-idx3l-narrow qmnist-testingdb 50000 10000))
+
+(de perf(db) 
+  (==> testmeter clear)
+  (==> thetrainer test db testmeter)
+  (==> testmeter display) )
+
+(demethod supervised compare (ds1 ds2)
+  (==> ds1 seek 0)
+  (==> ds2 seek 0)
+  (let ((total 0)(same 0)(c (matrix 2 2)))
+    (repeat (==> ds1 size)
+      (let ((c1 ()) (cd1 ()) (c2 ()) (cd2 ()))
+        (==> ds1 fprop input desired)
+        (==> machine fprop input output desired energy)
+        (setq c1 :output:output-class)
+        (setq cd1 (desired)) 
+        (==> ds2 fprop input desired)
+        (==> machine fprop input output desired energy)
+        (setq c2 :output:output-class)
+        (setq cd2 (desired))
+        (incr total)
+        (when (<> cd1 cd2)
+          (printf "example %d: cd1=%d cd2=%d\n" (==> ds1 tell) cd1 cd2) )
+        (if (= c1 c2)
+            (incr same)
+          (printf "example %d: cd=%d c1=%d c2=%d\n" (==> ds1 tell) cd1 c1 c2) )
+        (let ((err1 (if (= c1 cd1) 0 1))
+              (err2 (if (= c2 cd2) 0 1)))
+          (c err1 err2 (1+ (c err1 err2))) )
+        (==> ds1 next)
+        (==> ds2 next) ) )
+    (list total same c) ) ) )
